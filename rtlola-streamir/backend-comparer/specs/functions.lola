import math

input a : Int64
input b : UInt64
input c : Bool
input d : Float64

output positive_float := abs(d)

output between_zero_and_one := positive_float / (cast<UInt64,Float64>(b) + positive_float)
trigger between_zero_and_one < 0.0 || between_zero_and_one > 1.0 "assumption wrong"

output between_negative_one_and_one := between_zero_and_one * if c then 1.0 else -1.0

output j := tan(d)
output e := sqrt(positive_float)
output f := cos(d)
output h := sin(d)
output l := abs(a)
output m := abs(d)
output n := min(a, cast<UInt64,Int64>(b))
output p := min(d, 5.0)
output q := max(cast<Int64,UInt64>(abs(a)), b)
output r := max(d, 5.0)
output k := arctan(d)
output g := arccos(between_negative_one_and_one)
output i := arcsin(between_negative_one_and_one)
output o := a**2
output s := d**3.0
