import math
input x_drift: Float64
input y_drift: Float64
input z_drift: Float64

input pitch: Float64
input roll: Float64
input yaw: Float64

input multi_ranger_x_drift: Float64
input multi_ranger_y_drift: Float64
input multi_ranger_z_drift: Float64

output abs_pitch: Float64 := if pitch < 0.0 then -pitch else pitch
output abs_roll: Float64 := if roll < 0.0 then -roll else roll
output abs_yaw: Float64 := if yaw < 0.0 then -yaw else yaw

output x_drift_pos_exceeded: Bool := x_drift > 0.2
trigger x_drift_pos_exceeded "X drift right (State Estimate) > 0.2m — correcting left!"

output x_drift_neg_exceeded: Bool := x_drift < -0.2
trigger x_drift_neg_exceeded "X drift left (State Estimate) < -0.2m — correcting right!"

output y_drift_pos_exceeded: Bool := y_drift > 0.2
trigger y_drift_pos_exceeded "Y drift forward (State Estimate) > 0.2m — correcting back!"

output y_drift_neg_exceeded: Bool := y_drift < -0.2
trigger y_drift_neg_exceeded "Y drift back (State Estimate) < -0.2m — correcting forward!"

output z_drift_pos_exceeded: Bool := z_drift > 0.2
trigger z_drift_pos_exceeded "Z drift up (State Estimate) > 0.2m — correcting down!"

output z_drift_neg_exceeded: Bool := z_drift < -0.2
trigger z_drift_neg_exceeded "Z drift down (State Estimate) < -0.2m — correcting up!"

output multi_ranger_x_drift_pos_exceeded: Bool := multi_ranger_x_drift > 0.2
trigger multi_ranger_x_drift_pos_exceeded "X drift right (Multi-Ranger) > 0.2m — correcting left!"

output multi_ranger_x_drift_neg_exceeded: Bool := multi_ranger_x_drift < -0.2
trigger multi_ranger_x_drift_neg_exceeded "X drift left (Multi-Ranger) < -0.2m — correcting right!"

output multi_ranger_y_drift_pos_exceeded: Bool := multi_ranger_y_drift > 0.2
trigger multi_ranger_y_drift_pos_exceeded "Y drift forward (Multi-Ranger) > 0.2m — correcting back!"

output multi_ranger_y_drift_neg_exceeded: Bool := multi_ranger_y_drift < -0.2
trigger multi_ranger_y_drift_neg_exceeded "Y drift back (Multi-Ranger) < -0.2m — correcting forward!"

output multi_ranger_z_drift_pos_exceeded: Bool := multi_ranger_z_drift > 0.2
trigger multi_ranger_z_drift_pos_exceeded "Z drift up (Multi-Ranger) > 0.2m — correcting down!"

output multi_ranger_z_drift_neg_exceeded: Bool := multi_ranger_z_drift < -0.2
trigger multi_ranger_z_drift_neg_exceeded "Z drift down (Multi-Ranger) < -0.2m — correcting up!"

output pitch_exceeded: Bool := abs_pitch > 0.3
trigger pitch_exceeded "Pitch exceeded 0.3 radians! Stabilizing!"

output roll_exceeded: Bool := abs_roll > 0.3
trigger roll_exceeded "Roll exceeded 0.3 radians! Stabilizing!"

output yaw_exceeded: Bool := abs_yaw > 0.3
trigger yaw_exceeded "Yaw exceeded 0.3 radians! Stabilizing!"

input x: Float64
input y: Float64
input z: Float64

input waypoint_x: Float64
input waypoint_y: Float64
input waypoint_z: Float64

constant P: Float64 := 0.02
constant R: Float64 := 0.10

output dist_to_waypoint: Float64 := sqrt((x - waypoint_x) * (x - waypoint_x) + (y - waypoint_y) * (y - waypoint_y) + (z - waypoint_z) * (z - waypoint_z))

output prev_dist_to_waypoint: Float64 := dist_to_waypoint.offset(by: -1).defaults(to: 10000.0)

output step_closure: Float64 := prev_dist_to_waypoint - dist_to_waypoint

output reached_waypoint: Bool := dist_to_waypoint <= (R)

output min_closure_2s: Float64 @1s := step_closure.aggregate(over: 2s, using: min).defaults(to: 0.0)
output progressing_2s: Bool := min_closure_2s > P

output min_closure_5s: Float64 @1s := step_closure.aggregate(over: 5s, using: min).defaults(to: 0.0)
output progressing_5s: Bool := min_closure_5s > P

trigger reached_waypoint "Reached waypoint."
#[warning]
trigger @1s (not progressing_2s) and (not reached_waypoint.hold(or: false)) "Not progressing toward waypoint for 2s."
#[violation]
trigger (not progressing_5s) and (not reached_waypoint.hold(or: false)) "Potentially stuck: no net approach for 5s."