import math
input lat : Float64
input lon : Float64
input heading : Float64
input pitch : Float64
input bank : Float64
input velocity : Float64
input airspeed : Float64
input vertical_speed : Float64
input acceleration_x : Float64
input acceleration_y : Float64
input acceleration_z : Float64
input altitude : Float64

input reset_waypoints : Bool
input skip_waypoint : Bool

output velocity_kmh := velocity * 1.853

constant PI : Float64 := 3.14519

output current_lat : Float64 := lat
output current_long : Float64 := lon

output current_waypoint :=
    if waypoint_index.offset(by:-1).defaults(to:0) == 0 then (49.21444, 7.11135)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 1 then (49.21802, 7.08268)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 2 then (49.23394, 7.06602)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 3 then (49.25944, 7.0699)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 4 then (49.26683, 7.10939)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 5 then (49.26683, 7.15095)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 6 then (49.25631, 7.1767)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 7 then (49.23749, 7.17911)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 8 then (49.21418, 7.16709)
    else if waypoint_index.offset(by:-1).defaults(to:0) == 9 then (49.20409, 7.12897)
    else (0.0, 0.0)

output waypoint_lat := current_waypoint.0
output waypoint_long := current_waypoint.1

output waypoint_reached := distance_to_waypoint < 100.0

output waypoint_index : UInt64 @(reset_waypoints || skip_waypoint || (lat && lon)) :=
  if reset_waypoints.get(or: false) then 0
  else if skip_waypoint.get(or: false) || waypoint_reached.get(or: false) then (waypoint_index.offset(by:-1).defaults(to:0) + 1) % 10
  else waypoint_index.offset(by:-1).defaults(to: 0)

output finished := waypoint_reached && waypoint_index == 0

output current_heading := heading

constant EARTH_RADIUS : Float64 := 6371009.0 // meter

// distance to next waypoint

output current_lat_rad := current_lat * PI / 180.0
output current_long_rad := current_long * PI / 180.0
output waypoint_lat_rad := waypoint_lat * PI / 180.0
output waypoint_long_rad := waypoint_long * PI / 180.0
output mean_latitude := (waypoint_lat_rad + current_lat_rad) / 2.0
output distance_to_waypoint_lat := waypoint_lat_rad - current_lat_rad
output distance_to_waypoint_long := waypoint_long_rad - current_long_rad
output distance_to_waypoint := EARTH_RADIUS * sqrt(distance_to_waypoint_long**2.0 + (cos(mean_latitude)*distance_to_waypoint_lat)**2.0)


output waypoint_r := sqrt(distance_to_waypoint_long**2.0 + (distance_to_waypoint_lat)**2.0)
output waypoint_phi := if waypoint_r == 0.0 then 0.0 else if distance_to_waypoint_long >= 0.0 then arccos(distance_to_waypoint_lat / waypoint_r) else -arccos(distance_to_waypoint_lat / waypoint_r)
output waypoint_direction := waypoint_phi / (2.0*PI) * 360.0

// distance to geofence

output soft_geofence := current_lat < 49.19409 || current_lat > 49.27683 || current_long < 7.05102 || current_long > 7.194109999999999
trigger soft_geofence && !hard_geofence "warning:Slowly return to flight area."
output hard_geofence := current_lat < 49.18409 || current_lat > 49.28683 || current_long < 7.03602 || current_long > 7.20911
trigger hard_geofence "violation:Return to flight area immediately."

constant GEOFENCE_NORTH : Float64 := 7.20911
constant GEOFENCE_SOUTH : Float64 := 7.03602
constant GEOFENCE_EAST : Float64 := 49.18409
constant GEOFENCE_WEST : Float64 := 49.28683

output x := lat
output y := lon
output delta_x := x - x.last(or: x)
output delta_y := y - y.last(or: y)
output gradient := if delta_x == 0.0 then 1000.0 else delta_y / delta_x
output y_intercept := y - (gradient * x)

output left_y := y_intercept + GEOFENCE_WEST * gradient
output right_y := y_intercept + GEOFENCE_EAST * gradient
output bottom_x := (GEOFENCE_SOUTH - y_intercept) / gradient
output top_x := (GEOFENCE_NORTH - y_intercept) / gradient

output top_dx := (top_x - x) * PI / 180.0
output top_dy := (GEOFENCE_NORTH - y) * PI / 180.0
output top_distance := EARTH_RADIUS * sqrt(top_dx**2.0 + (cos(mean_latitude)*top_dy)**2.0)

output bottom_dx := (bottom_x - x) * PI / 180.0
output bottom_dy := (GEOFENCE_SOUTH - y) * PI / 180.0
output bottom_distance := EARTH_RADIUS * sqrt(bottom_dx**2.0 + (cos(mean_latitude)*bottom_dy)**2.0)

output left_dx := (GEOFENCE_WEST - x) * PI / 180.0
output left_dy := (left_y - y) * PI / 180.0
output left_distance := EARTH_RADIUS * sqrt(left_dx**2.0 + (cos(mean_latitude)*left_dy)**2.0)

output right_dx := (GEOFENCE_EAST - x) * PI / 180.0
output right_dy := (right_y - y) * PI / 180.0
output right_distance := EARTH_RADIUS * sqrt(right_dx**2.0 + (cos(mean_latitude)*right_dy)**2.0)

output left_right_violation
  := if delta_y * left_dy < 0.0 then (right_distance, (right_y, GEOFENCE_EAST)) else (left_distance, (left_y, GEOFENCE_WEST))

output top_bottom_violation
  := if delta_x * top_dx >= 0.0 then (top_distance, (GEOFENCE_NORTH, top_x)) else (bottom_distance, (GEOFENCE_SOUTH, bottom_x))

output nearest_geofence_violation
  := if left_right_violation.0 < top_bottom_violation.0 then left_right_violation else top_bottom_violation

output distance_to_geofence := nearest_geofence_violation.0
output geofence_violation_point := (nearest_geofence_violation.1.1, nearest_geofence_violation.1.0)

output estimated_time_until_geofence := if velocity_kmh == 0.0 then 5000.0 else distance_to_geofence  / (velocity_kmh / 3.6) 

// soft geofence violation

constant SOFT_GEOFENCE_NORTH : Float64 := 7.194109999999999
constant SOFT_GEOFENCE_SOUTH : Float64 := 7.05102
constant SOFT_GEOFENCE_EAST : Float64 := 49.19409
constant SOFT_GEOFENCE_WEST : Float64 := 49.27683

output soft_left_y := y_intercept + SOFT_GEOFENCE_WEST * gradient
output soft_right_y := y_intercept + SOFT_GEOFENCE_EAST * gradient
output soft_bottom_x := (SOFT_GEOFENCE_SOUTH - y_intercept) / gradient
output soft_top_x := (SOFT_GEOFENCE_NORTH - y_intercept) / gradient

output soft_top_dx := (soft_top_x - x) * PI / 180.0
output soft_top_dy := (SOFT_GEOFENCE_NORTH - y) * PI / 180.0
output soft_top_distance := EARTH_RADIUS * sqrt(top_dx**2.0 + (cos(mean_latitude)*soft_top_dy)**2.0)

output soft_bottom_dx := (soft_bottom_x - x) * PI / 180.0
output soft_bottom_dy := (SOFT_GEOFENCE_SOUTH - y) * PI / 180.0
output soft_bottom_distance := EARTH_RADIUS * sqrt(bottom_dx**2.0 + (cos(mean_latitude)*soft_bottom_dy)**2.0)

output soft_left_dx := (SOFT_GEOFENCE_WEST - x) * PI / 180.0
output soft_left_dy := (soft_left_y - y) * PI / 180.0
output soft_left_distance := EARTH_RADIUS * sqrt(left_dx**2.0 + (cos(mean_latitude)*soft_left_dy)**2.0)

output soft_right_dx := (SOFT_GEOFENCE_EAST - x) * PI / 180.0
output soft_right_dy := (soft_right_y - y) * PI / 180.0
output soft_right_distance := EARTH_RADIUS * sqrt(right_dx**2.0 + (cos(mean_latitude)*soft_right_dy)**2.0)

output soft_left_right_violation
  := if delta_y * soft_left_dy < 0.0 then (soft_right_distance, (soft_right_y, SOFT_GEOFENCE_EAST)) else (soft_left_distance, (soft_left_y, SOFT_GEOFENCE_WEST))

output soft_top_bottom_violation
  := if delta_x * soft_top_dx >= 0.0 then (soft_top_distance, (SOFT_GEOFENCE_NORTH, soft_top_x)) else (soft_bottom_distance, (SOFT_GEOFENCE_SOUTH, soft_bottom_x))

output soft_geofence_violation_point_swapped
  := if soft_left_right_violation.0 < soft_top_bottom_violation.0 then soft_left_right_violation.1 else soft_top_bottom_violation.1

output soft_geofence_violation_point := (soft_geofence_violation_point_swapped.1, soft_geofence_violation_point_swapped.0)